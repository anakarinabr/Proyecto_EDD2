/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import Estructuras.Cronometro;
import Estructuras.HashTable;
import Estructuras.Usuario;
import com.sun.tools.javac.Main;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Ana Blanco
 */
public class start_interfaz extends javax.swing.JFrame {

    private Timer crono;
    /**
     * Creates new form start_interfaz
     */
    public static Global global;

    public start_interfaz(Global global) {
        initComponents();
        this.global = global;
        this.setLocationRelativeTo(null);
        crono = new Timer(10, (ActionEvent e) -> {
            ActualizarLable();
        });
        crono.start();
    }

    /**
     * Método que el numero sea primo
     *
     * @param number el parametro number es un entero que es el que se verifica
     * @return true si el numero es primo
     */
    private static boolean isPrime(int number) {

        // Un número es primo si solo es divisible por 1 y por sí mismo
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }

        return true;
    }

    /**
     * Método que busca el nro primo más cercano para crear el array
     *
     * @param cantidad_usuarios el parametro es la cantidad de usuarios que
     * tiene la base de datos.
     * @return un entero que será el tamaño de la hashtable.
     */
    public int primocercano(int cantidad_usuario) {

        // Comprueba si el número dado es primo
        if (isPrime(cantidad_usuario)) {
            return cantidad_usuario;
        }

        // Inicializa el número primo cercano mayor
        int nearestPrime = cantidad_usuario + 1;

        // Comprueba si el número primo cercano mayor es primo
        while (!isPrime(nearestPrime)) {
            nearestPrime++;
        }

        return nearestPrime;
    }

    /**
     * Método que se encarga de la creación del hashtable
     *
     * @param cantidad_usuarios el parametro es la cantidad de usuarios de la
     * database
     */
    public HashTable creacionHashTable(double cantidad_usuarios) {

        int remainder = (int) (cantidad_usuarios * 10) % 10;

        double nuevovalor = 0;
        if (remainder == 0) {
            nuevovalor = Math.ceil(cantidad_usuarios);
        } else if (remainder < 5) {
            nuevovalor = Math.floor(cantidad_usuarios);
        } else {
            nuevovalor = Math.ceil(cantidad_usuarios);
        }

        int num = primocercano((int) nuevovalor);
        HashTable hashtable = new HashTable(num);
        return hashtable;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        CargarUsuariosButton = new javax.swing.JButton();
        Usuarios = new javax.swing.JButton();
        Documentos = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Impresora = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lb4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        CargarUsuariosButton.setText("Cargar Usuarios");
        CargarUsuariosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarUsuariosButtonActionPerformed(evt);
            }
        });
        getContentPane().add(CargarUsuariosButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 170, 30));

        Usuarios.setText("Manejo de usuarios");
        Usuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsuariosActionPerformed(evt);
            }
        });
        getContentPane().add(Usuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, 170, 30));

        Documentos.setText("Manejo de documentos");
        Documentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DocumentosActionPerformed(evt);
            }
        });
        getContentPane().add(Documentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, 170, 30));

        jButton1.setText("Guardar información");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 260, 170, 30));

        Impresora.setText("Manejo de impresora");
        Impresora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImpresoraActionPerformed(evt);
            }
        });
        getContentPane().add(Impresora, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 220, 170, 30));

        jButton2.setText("Ver base de datos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 170, 30));

        lb4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lb4.setText("0 : 0 : 0");
        getContentPane().add(lb4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 320, 140, 60));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/1.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CargarUsuariosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarUsuariosButtonActionPerformed

        /**
         * Método que permite leer el csv 
         * Realizado por: Ana Blanco. Versión:
         * 11/25/2023
         */
        JFileChooser file = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".csv", "csv");
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file.setFileFilter(filter);
        int selection = file.showOpenDialog(this);

        if (selection == JFileChooser.APPROVE_OPTION) {

            File archive = file.getSelectedFile();
            String path = archive.getAbsolutePath();
            this.global.setPath(path);

            if (!path.contains("csv")) {
                JOptionPane.showMessageDialog(null, "Por favor elija un archivo del tipo csv");
            } else {
                try {
                    File archivo = new File(path);
                    FileReader fr = new FileReader(archivo);
                    BufferedReader br = new BufferedReader(fr);

                    String usuarios;
                    String UsuariosInfo = "";

                    while ((usuarios = br.readLine()) != null) {

                        if (!usuarios.isEmpty() && !usuarios.isBlank()) {
                            UsuariosInfo += usuarios + "\n";

                        }
                    }
                    fr.close();
                    br.close();
                    UsuariosInfo = UsuariosInfo.trim();

                    if (!"".equals(UsuariosInfo)) {

                        String[] info1 = UsuariosInfo.split("\n");

                        double num = 1.3;
                        double valor = (info1.length - 1);
                        double cantidad_usuarios = valor * num;

                        HashTable hashtable = creacionHashTable(cantidad_usuarios);

                        for (int i = 1; i < info1.length; i++) {
                            String[] info2 = info1[i].split(",");
                            Usuario usuario = new Usuario(info2[0], info2[1]);
                            this.global.getListaUsuarios().addend(usuario);
                            int hash = hashtable.hash(usuario.getName());
                            hashtable.Insert_Usuario(hash, usuario);
                        }

                        this.global.setHashtable(hashtable);
                    }

                    JOptionPane.showMessageDialog(null, "Se cargó exitosamente la información!");

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error!!!");

                }
            }
        }
    }//GEN-LAST:event_CargarUsuariosButtonActionPerformed

    private void UsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsuariosActionPerformed
        /**
         * Método que abre la interfaz de usuarios Realizado por: Ana Blanco.
         * Versión: 11/25/2023
         */

        if (this.global.getHashtable() != null) {
            this.setVisible(false);
            Usuarios_interfaz v2 = new Usuarios_interfaz(this.global);
            v2.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Debe cargar los usuarios primero!");
        }
    }//GEN-LAST:event_UsuariosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        /**
         * Método que escribe en el csv los usuarios de la database Realizado
         * por: Ana Blanco. Versión: 11/25/2023
         */
        String todo = this.global.getListaUsuarios().getAllUsers();

        try {
            if (this.global.getPath() != null) {

                PrintWriter pw = new PrintWriter(this.global.getPath());
                pw.print(todo);
                pw.close();
                JOptionPane.showMessageDialog(null, "Guardado exitoso");

            } else {
                JOptionPane.showMessageDialog(null, "Error!! Primero debe cargar un archivo csv");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error!!!!!");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void ImpresoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImpresoraActionPerformed

        /**
         * Método que abre la interfaz de la impresora Realizado por: Ana
         * Blanco. Versión: 11/25/2023
         */
        if (this.global.getHashtable() != null) {
            this.setVisible(false);
            Impresora_interfaz v2 = new Impresora_interfaz(this.global);
            v2.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Debe cargar los usuarios primero!");
        }
    }//GEN-LAST:event_ImpresoraActionPerformed

    private void DocumentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DocumentosActionPerformed
        /**
         * Método que abre la interfaz de documentos Realizado por: Ana Blanco.
         * Versión: 11/25/2023
         */

        if (this.global.getHashtable() != null) {
            this.setVisible(false);
            Documentos_interfaz v2 = new Documentos_interfaz(this.global);
            v2.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Debe cargar los usuarios primero!");
        }
    }//GEN-LAST:event_DocumentosActionPerformed
    private void ActualizarLable() {

        String cronometro = global.getCronometro().GetHora() + " : " + global.getCronometro().GetMinutos() + " : " + global.getCronometro().GetSegundos();
        lb4.setText(cronometro);
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        /**
         * Método que abre la interfaz de database Realizado por: Ana Blanco.
         * Versión: 11/25/2023
         */
        if (this.global.getHashtable() != null) {
            BasedeDatos_interfaz ventana = new BasedeDatos_interfaz(this.global);
            this.setVisible(false);
            ventana.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Debe cargar los usuarios primero!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(start_interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(start_interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(start_interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(start_interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new start_interfaz(global).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CargarUsuariosButton;
    private javax.swing.JButton Documentos;
    private javax.swing.JButton Impresora;
    private javax.swing.JButton Usuarios;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lb4;
    // End of variables declaration//GEN-END:variables
}
