/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import Estructuras.Documento;
import Estructuras.ListaSimpleUsuarios;
import Estructuras.NodoSimple;
import Estructuras.Usuario;
import static Interfaces.EliminarDocumento.global;
import java.util.HashSet;
import javax.swing.JOptionPane;

/**
 *
 * @author Ana Blanco
 */
public class MandarImprimir extends javax.swing.JFrame {

    public static Global global;

    /**
     * Creates new form MandarImprimir
     */
    public MandarImprimir(Global global) {
        this.global = global;
        initComponents();
        this.setLocationRelativeTo(null);
        NodoSimple aux = global.getListaUsuarios().getpFirst();
        for (int i = 0; i < global.getListaUsuarios().getSize(); i++) {
            Usuario usuario = (Usuario) aux.getData();
            if (!usuario.getDocs().EsVacia()) {
                ComboBoxUsuarios.addItem(usuario.getName().toString());
            }
            aux = aux.getPnext();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ComboBoxUsuarios = new javax.swing.JComboBox<>();
        ComboBoxDocumentos = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        Selection = new javax.swing.JButton();
        Imprimir = new javax.swing.JButton();
        prioritario = new javax.swing.JToggleButton();
        ComboBoxUsuario = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(ComboBoxUsuarios, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 180, -1));

        getContentPane().add(ComboBoxDocumentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, 180, -1));

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 15, -1, -1));

        Selection.setText("Seleccionar");
        Selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectionActionPerformed(evt);
            }
        });
        getContentPane().add(Selection, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, 110, -1));

        Imprimir.setText("Imprimir");
        Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImprimirActionPerformed(evt);
            }
        });
        getContentPane().add(Imprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 350, 130, -1));

        prioritario.setText("Prioritario");
        getContentPane().add(prioritario, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 280, 130, -1));

        ComboBoxUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/9.png"))); // NOI18N
        getContentPane().add(ComboBoxUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        /**
         * Método que abre la interfaz principal
         * Realizado por: Ana Blanco.
         * Versión: 11/25/2023
         */
        Documentos_interfaz imprimir = new Documentos_interfaz(this.global);
        this.setVisible(false);
        imprimir.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectionActionPerformed
        
        /**
         * Método que permite llenar el ComboBox para ver los documentos que le pueden
         * mandar a imprimir
         * Realizado por: Ana Blanco.
         * Versión: 11/25/2023
         */
        
        ComboBoxDocumentos.removeAllItems();
        if (ComboBoxUsuarios.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "No hay usuarios con documentos que se puedan mandar a imprimir");
        } else {
                String usuario = ComboBoxUsuarios.getSelectedItem().toString();
            int indice = this.global.getHashtable().hash(usuario);

            ListaSimpleUsuarios lista = this.global.getHashtable().getTable()[indice];
            NodoSimple aux = lista.getpFirst();
            Usuario auxusuario = (Usuario) aux.getData();

            for (int i = 0; i < lista.getSize(); i++) {
                if (auxusuario.getName().equalsIgnoreCase(usuario)) {
                    NodoSimple doc = auxusuario.getDocs().getpFirst();
                    for (int j = 0; j < auxusuario.getDocs().getSize(); j++) {
                        Documento documento = (Documento) doc.getData();
                        if (!documento.isEncola()) {
                            ComboBoxDocumentos.addItem(documento.getTitulo());
                        }
                        doc = doc.getPnext();
                    }
                    break;
                } else {
                    aux = aux.getPnext();
                    auxusuario = (Usuario) aux.getData();
                }
            }
        }
    }//GEN-LAST:event_SelectionActionPerformed

    private void ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImprimirActionPerformed
        
        /**
         * Método que permite incluir los documentos al monticulo.
         * Realizado por: Ana Blanco.
         * Versión: 11/25/2023
         */
        try {
            String usuario = (String) ComboBoxUsuarios.getSelectedItem();
            String documento = (String) ComboBoxDocumentos.getSelectedItem();

            if (usuario != null || documento != null) {

                int indice = this.global.getHashtable().hash(usuario);
                usuario = usuario.trim();
                ListaSimpleUsuarios lista = this.global.getHashtable().getTable()[indice];
                NodoSimple aux = lista.getpFirst();
                Usuario auxusuario = (Usuario) aux.getData();
                for (int i = 0; i < lista.getSize(); i++) {
                    if (auxusuario.getName().equalsIgnoreCase(usuario)) {
                        Documento esta = auxusuario.getDocs().BuscarDocumento(documento);
                        if (documento != null) {
                            esta.setEncola(true);
                            esta.setPrioridad(prioritario.isSelected());
                            int hora = this.global.getCronometro().GetHora();
                            int min = this.global.getCronometro().GetMinutos();
                            int seg = this.global.getCronometro().GetSegundos();
                            esta.ActualizarTime(auxusuario.getPrioridad(), hora, min, seg);
                            this.global.getMonticulobinario().insertar(esta);
                            JOptionPane.showMessageDialog(null, "El documento: " + esta.getTitulo() + " fué enviado a la cola de impresión");
                  
                        }
                        break;
                    } else {
                        aux = aux.getPnext();
                        auxusuario = (Usuario) aux.getData();
                    }

                }

                ComboBoxDocumentos.removeAllItems();

                ComboBoxUsuarios.removeAllItems();
                NodoSimple aux3 = this.global.getListaUsuarios().getpFirst();
                for (int i = 0; i < global.getListaUsuarios().getSize(); i++) {
                    Usuario usuario3 = (Usuario) aux3.getData();
                    if (!usuario3.getDocs().EsVacia()) {
                        boolean print = false;
                        NodoSimple aux5 = usuario3.getDocs().getpFirst();
                        for (int j = 0; j < usuario3.getDocs().getSize(); j++) {
                            Documento doc = (Documento) aux5.getData();
                            if (doc.isEncola()) {
                                aux5 = aux5.getPnext();
                            } else {
                                print = true;
                                break;
                            }
                        }
                        if (print) {
                            ComboBoxUsuarios.addItem(usuario3.getName().toString());
                        }
                    }
                    aux3 = aux3.getPnext();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No exiten los campos para eliminar");
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Ups. Algo salió mal.\nLuego de elegir el usuario debes hacer click en seleccionar para actualizar los documentos");
        }
    }//GEN-LAST:event_ImprimirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MandarImprimir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MandarImprimir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MandarImprimir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MandarImprimir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MandarImprimir(global).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxDocumentos;
    private javax.swing.JLabel ComboBoxUsuario;
    private javax.swing.JComboBox<String> ComboBoxUsuarios;
    private javax.swing.JButton Imprimir;
    private javax.swing.JButton Selection;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton prioritario;
    // End of variables declaration//GEN-END:variables
}
